Summary
-------
The `github.com/palantir/godel/pkg/products` package can be used to write integration tests that run against the build
artifacts of a product and test tags can be used to define test sets for integration tests.

Tutorial start state
--------------------
* `${GOPATH}/src/${PROJECT_PATH}` exists, is the working directory and is initialized as a Git repository
* Project contains `godel` and `godelw`
* Project contains `main.go`
* Project contains `.gitignore` that ignores GoLand files
* Project contains `echo/echo.go`, `echo/echo_test.go` and `echo/echoer.go`
* `godel/config/dist-plugin.yml` is configured to build `echgo2`
* Project is tagged as 0.0.1
* `godel/config/dist-plugin.yml` is configured to create distributions for `echgo`
* Project is tagged as 0.0.2
* Go files have license headers
* `godel/config/godel.yml` is configured to add the go-generate plugin
* `godel/config/generate-plugin.yml` is configured to generate string function
* `godel/config/godel.yml` is configured to ignore all `.+_string.go` files

([Link]())

Write tests that run using build artifacts
------------------------------------------
`echgo2` currently has unit tests that test the contracts of the `echgo` package. Unit tests are a great way to test the
API contracts of packages, and in an ideal world all of the packages for a project having tests that verify the package
APIs would be sufficient to ensure the correctness of an entire program.

However, in many cases there exists behavior that can only be tested in a true end-to-end workflow. For example, echgo2
currently has some logic in its `main.go` file that parses the command-line flags, determines what functions to call
based on flags and ultimately prints the output to the console. If we want to test things such as what happens when
invalid values are supplied as flags, how multiple command-line arguments are parsed or the exit codes of the program,
there is not a straightforward way to write that test.

The `github.com/palantir/godel/pkg/products` packages provides functionality that makes it easy to write such tests for
projects that use gödel to build their products. The `products` package provides functions that ensure that specified
products are built using the build configuration defined for the product and provides a path to the built executable
that can be used for testing.

We need to add `github.com/palantir/godel/pkg/products` as a vendored dependency for the project. Start by getting the
gödel project:

```START_TUTORIAL_CODE
mkdir -p ${GOPATH}/src/github.com/palantir && cd $_
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
go get -u github.com/palantir/godel
```END_TUTORIAL_CODE

There are multiple different ways to vendor dependencies. For the purposes of this tutorial, we will forego formal
vendoring and vendor the dependency manually.

```START_TUTORIAL_CODE
cd ${GOPATH}/src/${PROJECT_PATH}
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
mkdir -p vendor/github.com/palantir/godel/pkg/products/v2/products
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
cp ${GOPATH}/src/github.com/palantir/godel/pkg/products/v2/products/* vendor/github.com/palantir/godel/pkg/products/v2/products
```END_TUTORIAL_CODE

Run the following to define a test that tests the behavior of invoking echgo2 with an invalid echo type and run the test
(this test is still in the iteration phase, so it simply prints the result of the output rather than asserting against
it):

```START_TUTORIAL_CODE
mkdir -p integration_test
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
echo '// Copyright (c) 2018 Author Name. All rights reserved.
// Use of this source code is governed by the Apache License, Version 2.0
// that can be found in the LICENSE file.

package integration_test

import (
	"fmt"
	"os/exec"
	"testing"

	"github.com/palantir/godel/pkg/products/v2/products"
)

func TestInvalidType(t *testing.T) {
	echgoPath, err := products.Bin("echgo2")
	if err != nil {
		panic(err)
	}
	cmd := exec.Command(echgoPath, "-type", "invalid", "foo")
	output, err := cmd.CombinedOutput()
	if err != nil {
		t.Errorf("cmd %v failed with error %v. Output: %s", cmd.Args, err, string(output))
	}
	fmt.Printf("%q", string(output))
	fmt.Println()
}' > integration_test/integration_test.go
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
go test -v ./integration_test
```END_TUTORIAL_CODE

The `products.Bin("echgo2")` call uses gödel to build the echgo2 product (if needed) and returns a path to the binary
that was built. Because this is a path to a valid binary, `exec.Command` can be use to invoke it. This allows the test
to specify arguments, hook up input/output streams, check error values and assert various behavior.

In this case, the output seems reasonable -- it prints `invalid echo type: invalid\n`. However, note that the error was
`nil` -- this is a bug. If the specified echo type was invalid, then the program should return with a non-zero exit
code, which should cause `cmd.CombinedOutput` to return an error.

Fix the bug by updating `main.go` and then re-run the test:

```START_TUTORIAL_CODE
SRC='// Copyright (c) 2018 Author Name. All rights reserved.
// Use of this source code is governed by the Apache License, Version 2.0
// that can be found in the LICENSE file.

package main

import (
	"flag"
	"fmt"
	"os"
	"strings"

	"PROJECT_PATH/echo"
)

var version = "none"

func main() {
	versionVar := flag.Bool("version", false, "print version")
	typeVar := flag.String("type", echo.Simple.String(), "type of echo")
	flag.Parse()
	if *versionVar {
		fmt.Println("echgo2 version:", version)
		return
	}
	typ, err := echo.TypeFrom(*typeVar)
	if err != nil {
		fmt.Println("invalid echo type:", *typeVar)
		os.Exit(1)
	}
	echoer := echo.NewEchoer(typ)
	fmt.Println(echoer.Echo(strings.Join(flag.Args(), " ")))
}' && SRC=${SRC//PROJECT_PATH/$PROJECT_PATH} && echo "$SRC" > main.go
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE|fail=true
go test -v ./integration_test
```END_TUTORIAL_CODE

We can see that the test now fails as expected. Since this is the expected behavior, update the test to pass when this
happens and run the test again:

```START_TUTORIAL_CODE
echo '// Copyright (c) 2018 Author Name. All rights reserved.
// Use of this source code is governed by the Apache License, Version 2.0
// that can be found in the LICENSE file.

package integration_test

import (
	"os/exec"
	"testing"

	"github.com/palantir/godel/pkg/products/v2/products"
)

func TestInvalidType(t *testing.T) {
	echgoPath, err := products.Bin("echgo2")
	if err != nil {
		panic(err)
	}
	cmd := exec.Command(echgoPath, "-type", "invalid", "foo")
	output, err := cmd.CombinedOutput()
	gotOutput := string(output)
	if err == nil {
		t.Errorf("expected command %v to fail. Output: %s", cmd.Args, gotOutput)
	}
	wantOutput := "invalid echo type: invalid\\n"
	if wantOutput != gotOutput {
		t.Errorf("invalid output: want %q, got %q", wantOutput, gotOutput)
	}
	wantErr := "exit status 1"
	gotErr := err.Error()
	if wantErr != gotErr {
		t.Errorf("invalid error output: want %q, got %q", wantErr, gotErr)
	}
}' > integration_test/integration_test.go
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
go test -v ./integration_test
```END_TUTORIAL_CODE

We can see that the test now passes. The test will now run when `./godelw test` is invoked.

One thing to note about this construction is that the `go build` and `go install` commands will currently not work for
`integration_test` because the directory contains only tests:

```START_TUTORIAL_CODE|fail=true
go build ./integration_test
```END_TUTORIAL_CODE

We can work around this by adding a `doc.go` file to the directory to act as a placeholder:

```START_TUTORIAL_CODE
echo '// Copyright (c) 2018 Author Name. All rights reserved.
// Use of this source code is governed by the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Package integration contains integration tests.
package integration' > integration_test/doc.go
```END_TUTORIAL_CODE

Verify that building the directory no longer fails:

```START_TUTORIAL_CODE
go build ./integration_test
```END_TUTORIAL_CODE

Run `./godelw test` to verify that this test is run:

```START_TUTORIAL_CODE
./godelw test
```END_TUTORIAL_CODE

The configuration in `godel/config/test.yml` can be used to group tests into tags. Update the configuration as follows:

```START_TUTORIAL_CODE
echo 'tags:
  integration:
    names:
      - "^integration_test$"' > godel/config/test-plugin.yml
```END_TUTORIAL_CODE

This configuration defines a tag named "integration" that matches any directories named "integration_test". Run the
following command to run only the tests that match the "integration" tag:

```START_TUTORIAL_CODE
./godelw test --tags=integration
```END_TUTORIAL_CODE

By default, the `./godelw test` task runs all tests (all tagged and untagged tests). Multiple tags can be specified by
separating them with a comma. Specifying `all` will run all tagged tests, while specifying `none` will run all tests
that do not match any tags.

Commit these changes by running the following:

```START_TUTORIAL_CODE
git add godel main.go integration_test vendor
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
git commit -m "Add integration tests"
```END_TUTORIAL_CODE

Tutorial end state
------------------
* `${GOPATH}/src/${PROJECT_PATH}` exists, is the working directory and is initialized as a Git repository
* Project contains `godel` and `godelw`
* Project contains `main.go`
* Project contains `.gitignore` that ignores GoLand files
* Project contains `echo/echo.go`, `echo/echo_test.go` and `echo/echoer.go`
* `godel/config/dist-plugin.yml` is configured to build `echgo2`
* Project is tagged as 0.0.1
* `godel/config/dist-plugin.yml` is configured to create distributions for `echgo`
* Project is tagged as 0.0.2
* Go files have license headers
* `godel/config/godel.yml` is configured to add the go-generate plugin
* `godel/config/generate-plugin.yml` is configured to generate string function
* `godel/config/godel.yml` is configured to ignore all `.+_string.go` files
* `integration_test` contains integration tests
* `godel/config/test-plugin.yml` is configured to specify the "integration" tag

Tutorial next step
------------------
[Sync documentation with GitHub wiki](https://github.com/palantir/godel/wiki/GitHub-wiki)
