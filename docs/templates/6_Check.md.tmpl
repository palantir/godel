Summary
-------
`./godelw check` runs a set of static analysis checks on the project Go files.

Tutorial start state
--------------------
* `${GOPATH}/src/${PROJECT_PATH}` exists, is the working directory and is initialized as a Git repository
* Project contains `godel` and `godelw`
* Project contains `main.go`
* Project contains `.gitignore` that ignores GoLand files
* Project contains `echo/echo.go`

Run checks
----------
When writing Go code, it can be useful to check code for errors and consistency issues using static code analysis.

The current echo program simply echoes the user's input exactly. We will extend the program to allow different types of
echoes to be generated. As a first step to doing this, we will define an `Echoer` interface that defines an `Echo`
function and refactor the current echo functionality to be a simple echoer that implements this interface.

Run the following to update the program to perform this refactor:

```START_TUTORIAL_CODE
echo 'package echo

type Echoer interface {
	Echo(in string) string
}' > echo/echoer.go
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
echo 'package echo

func NewEchoer() Echoer {
	return &simpleEchoer{}
}

type simpleEchoer struct{}

func (_ *simpleEchoer) Echo(in string) string {
	return in
}' > echo/echo.go
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
SRC='package main

import (
	"fmt"
	"os"
	"strings"

	"PROJECT_PATH/echo"
)

func main() {
	echoer := echo.NewEchoer()
	fmt.Println(echoer.Echo(strings.Join(os.Args[1:], " ")))
}' && SRC=${SRC//PROJECT_PATH/$PROJECT_PATH} && echo "$SRC" > main.go
```END_TUTORIAL_CODE

These files are formatted correctly and form a fully functioning program. Run `./godelw check` to run static code checks
on the project:

```START_TUTORIAL_CODE|fail=true
./godelw check
```END_TUTORIAL_CODE

The output indicates that there was an issue identified by the `golint` check. Fix the issue by updating the receiver
name:

```START_TUTORIAL_CODE
echo 'package echo

func NewEchoer() Echoer {
	return &simpleEchoer{}
}

type simpleEchoer struct{}

func (e *simpleEchoer) Echo(in string) string {
	return in
}' > echo/echo.go
```END_TUTORIAL_CODE

Run `./godelw check` again to verify that the issue has been resolved:

```START_TUTORIAL_CODE
./godelw check
```END_TUTORIAL_CODE

Commit the changes to the repository:

```START_TUTORIAL_CODE
git add main.go echo
```END_TUTORIAL_CODE
```START_TUTORIAL_CODE
git commit -m "Add echoer interface"
```END_TUTORIAL_CODE

Refer to the "More" sections below for examples of configuring the checks in different ways.

Tutorial end state
------------------
* `${GOPATH}/src/${PROJECT_PATH}` exists, is the working directory and is initialized as a Git repository
* Project contains `godel` and `godelw`
* Project contains `main.go`
* Project contains `.gitignore` that ignores GoLand files
* Project contains `echo/echo.go` and `echo/echoer.go`

Tutorial next step
------------------
[Run tests](https://github.com/palantir/godel/wiki/Test)

More
----
### Suppress check issues based on output
In some instances, it may be desirable to suppress certain issues flagged by checks. As an example, modify
`echo/echoer.go` as follows:

```START_TUTORIAL_CODE
echo 'package echo

// Echoes the input.
type Echoer interface {
	Echo(in string) string
}' > echo/echoer.go
```END_TUTORIAL_CODE

Running `./godelw check` flags the following:

```START_TUTORIAL_CODE|fail=true
./godelw check
```END_TUTORIAL_CODE

Although this is a valid check performed by `go lint`, not all projects conform exactly with the Go style for comments.
In some cases, it makes sense to disable specific checks like this. This can be done by updating the
`godel/config/check.yml` file to configure the `check` command to ignore all output from the `golint` check that
contains `comment on exported type \w should be of the form` in its message.

The default configuration for `godel/config/check-plugin.yml` is as follows:

```START_TUTORIAL_CODE
cat godel/config/check-plugin.yml
```END_TUTORIAL_CODE

Add the line `- value: "comment on exported type [[:word:]]+ should be of the form"` to this configuration:

```START_TUTORIAL_CODE
echo 'checks:
  golint:
    filters:
      - value: "should have comment or be unexported"
      - value: "or a comment on this block"
      - value: "comment on exported type [[:word:]]+ should be of the form"' > godel/config/check-plugin.yml
```END_TUTORIAL_CODE

Re-run `./godelw check` with the updated configuration to verify that lines that match this output are no longer
reported:

```START_TUTORIAL_CODE
./godelw check
```END_TUTORIAL_CODE

Revert the local changes by running the following:

```START_TUTORIAL_CODE
git checkout -- echo godel
```END_TUTORIAL_CODE

Filters have a `type` and a `value`. When `type` is not specified (as in the examples above), it defaults to `message`,
which means that the value is matched against the message of the output. The `type` field for filters can also be `name`
or `path`. `name` matches files based on their name, while `path` matches based on an exact relative path.

For example, the following configuration will ignore all issues reported by `errcheck` for `main.go`:

```yaml
checks:
  errcheck:
    filters:
      - type: "path"
        value: "main.go"
```

Because the `type` above is `path`, this configuration would ignore `errcheck` issues in `./main.go`. However, issues in
other files named `main.go` in the project (for example, `./subproject/main.go`) would still be reported. Setting the
`type` to `name` would change the behavior so that issues in all files named `main.go` would be ignored.

The match values use Go regular expressions to perform matches. For example, the following configuration ignores all
`golint` issues reported for any files that have the extension `.pb.go`:

```yaml
checks:
  golint:
    filters:
      - type: "name"
        value: ".*.pb.go"
```

### Disable checks
Checks can be disabled completely for the entire project by setting the `skip` field to `true`.

For example, the following configuration will disable the `golint` check for the project:

```START_TUTORIAL_CODE
echo 'checks:
  golint:
    skip: true' > godel/config/check-plugin.yml
```END_TUTORIAL_CODE

Run `./godelw check` with the updated configuration to verify that the `golint` check is no longer run:

```START_TUTORIAL_CODE
./godelw check
```END_TUTORIAL_CODE

Revert the local changes by running the following:

```START_TUTORIAL_CODE
git checkout -- godel
```END_TUTORIAL_CODE

### Configure checks
Many checks offer customizable parameters for the checks. Such parameters are specified in the `config` field of the
check's configuration. Refer to the documentation for the asset that provides the check for details on configuring a
check.

### Run individual checks
Individual checks can be run in isolation by specifying the name of the check as an argument to `check`. This can be
useful when iterating on code in an attempt to fix an issue flagged by a specific check.

For example, the following runs only `deadcode` and `govet`:

```START_TUTORIAL_CODE
./godelw check deadcode govet
```END_TUTORIAL_CODE

### Run an underlying check directly
Running an individual check using `check` runs just that check, but it still runs it through the `check` task, which
uses the logic of the plugin and the asset to determine the arguments passed to the underlying check. However, sometimes
we may want to run the underlying check directly -- possibly to run it on a specific file or package or to specify flags
that are not available through configuration.

The `run-check` task can be used to do this. Running `./godelw run-check [check] [flags] [args]` calls the "underlying"
check directly. It is up to an asset to determine what this means, but most assets wrap a standalone check implemented
as its own CLI, and "running" the check means invoking the CLI. If the underlying check accepts flags, it is safest to
place a `--` after the check so that all of the flags and arguments are passed directly to the underlying check.

For example, `errcheck` can be invoked directly as follows:

```START_TUTORIAL_CODE
./godelw run-check errcheck -- --help
```END_TUTORIAL_CODE

The help output printed here is that of `errcheck`, and we could have supplied the errcheck flags and arguments directly
in place of `--help`. Also note the use of `--` to indicate that all of the flags/arguments should be passed to the
underlying command. In this instance, if `--` was not used, the `--help` flag would have shown the output for
`run-check errcheck` instead:

```START_TUTORIAL_CODE
./godelw run-check errcheck --help
```END_TUTORIAL_CODE

### Run checks sequentially
Checks can be run sequentially by running with the `--parallel=false` flag:

```START_TUTORIAL_CODE
./godelw check --parallel=false
```END_TUTORIAL_CODE

### Constituent checks
g√∂del includes the following checks by default:

* [`compiles`](https://github.com/palantir/go-compiles) verifies that all of the Go code in the project
  compiles, including code in test files (which is not checked by `go build`)
* [`deadcode`](https://github.com/tsenart/deadcode) finds unused code
* [`errcheck`](https://github.com/kisielk/errcheck) ensures that returned errors are checked
* [`extimport`](https://github.com/palantir/go-extimport) verifies that all non-standard library
  packages that are imported by the project are present in a vendor directory within the project
* `govet` runs [`go vet`](https://golang.org/cmd/vet/)
* [`importalias`](https://github.com/palantir/go-importalias) ensures that, if an import path in the package is imported
  using an alias, then all imports in the project that assign an alias for that path use the same alias
* [`ineffassign`](https://github.com/gordonklaus/ineffassign) flags ineffectual assignment statements
* [`novendor`](https://github.com/palantir/go-novendor) flags projects that exist in the `vendor` directory but are not
  used by the project
* [`outparamcheck`](https://github.com/palantir/outparamcheck) checks that functions that are meant to take an output
  parameter defined as an `interface{}` are passed pointers to an object rather than a concrete object
* [`unconvert`](https://github.com/mdempsky/unconvert) flags unnecessary conversions
* [`varcheck`](https://github.com/opennota/check) checks for unused global variables and constants

### Add or remove checks
The checks that are available to the `check` task are determined by the assets provided to the `okgo` plugin. Checks can
be added or removed by modifying the asset configuration for the `okgo` plugin.

For example, we can add the [nobadfuncs check](https://github.com/palantir/go-nobadfuncs) by adding the
[godel-okgo-asset-nobadfuncs asset](https://github.com/palantir/godel-okgo-asset-nobadfuncs). Modify the
`godel/config/godel.yml` file as follows:

```START_TUTORIAL_CODE
echo 'default-tasks:
  resolvers:
    - https://palantir.bintray.com/releases/{{GroupPath}}/{{Product}}/{{Version}}/{{Product}}-{{Version}}-{{OS}}-{{Arch}}.tgz
  tasks:
    com.palantir.okgo:check-plugin:
      assets:
        - locator:
            id: "com.palantir.godel-okgo-asset-nobadfuncs:nobadfuncs-asset:1.0.0-rc2"
exclude:
  names:
    - "\\\\..+"
    - "vendor"
  paths:
    - "godel"' > godel/config/godel.yml
```END_TUTORIAL_CODE

This adds the asset, which makes it available as a check:

```START_TUTORIAL_CODE
./godelw check nobadfuncs
```END_TUTORIAL_CODE

Although the `skip` configuration makes it easy to disable a check, it is also possible to remove the check entirely.
This can be done by updating the `exclude-default-assets` configuration. For example, the following configuration
removes the `novendor` check entirely:

```START_TUTORIAL_CODE
echo 'default-tasks:
  resolvers:
    - https://palantir.bintray.com/releases/{{GroupPath}}/{{Product}}/{{Version}}/{{Product}}-{{Version}}-{{OS}}-{{Arch}}.tgz
  tasks:
    com.palantir.okgo:check-plugin:
      exclude-default-assets:
        - "com.palantir.godel-okgo-asset-novendor:novendor-asset"
exclude:
  names:
    - "\\\\..+"
    - "vendor"
  paths:
    - "godel"' > godel/config/godel.yml
```END_TUTORIAL_CODE

Verify that `novendor` is no longer present as a check:

```START_TUTORIAL_CODE|fail=true
./godelw check novendor
```END_TUTORIAL_CODE

Revert the local changes by running the following:

```START_TUTORIAL_CODE
git checkout -- godel
```END_TUTORIAL_CODE
