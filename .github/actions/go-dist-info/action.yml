name: 'Get information for Go distribution'
description: |
  Determines the Go distribution version that should be used based on the provided parameter, the go-version file in the
  repository, and the fallback value. Sets outputs that indicate the version of Go that should be used and whether or
  not the directory for that distribution exists.
inputs:
  gopath:
    description: |
      The value of GOPATH.
    required: true
  go-version:
    description: |
      If non-empty, this value is written as the Go version (files in the repository/image are not consulted). The
      version should be of the form specified in a Go distribution's VERSION file (for example, "go1.16.5").
    required: false
    default: ""
  go-version-file:
    description: |
      The path to the file that specifies the version of Go that should be used for the project.
    required: false
    default: ".palantir/go-version"
  go-prev-version:
    description: |
      If greater than 0, modifies the version of Go that would be used to be the first release of the version of Go that
      is go-prev-version minor versions smaller. For example, if the version of Go that would be used is "go1.16.5" and
      go-prev-version is 1, the version of Go that will be used will be "go1.15". An error is raised if the subtraction
      would make the minor version less than 0.
    required: false
    default: "0"
outputs:
  go-dist-version:
    description: "Version of Go distribution that should be used."
    value: ${{ steps.determine-go-dist-version.outputs.go-dist-version }}
  go-dist-exists:
    description: "'true' if the desired Go distribution exists, 'false' otherwise."
    value: ${{ steps.go-dist-exists.outputs.go-dist-exists }}
runs:
  using: "composite"
  steps:
    - id: determine-go-dist-version
      shell: bash
      run: |
        PARAM_GO_VERSION="${{ inputs.go-version }}"
        PARAM_GO_VERSION_FILE="${{ inputs.go-version-file }}"
        PARAM_GO_PREV_VERSION="${{ inputs.go-prev-version }}"
        FALLBACK_GO_VERSION_FILE="$(go env GOROOT)"/VERSION
        # set Go version
        GO_VERSION=${PARAM_GO_VERSION}
        if [ ! -z "${GO_VERSION}" ]; then
          echo "Go version specified as parameter is ${GO_VERSION}"
        elif [ -f "${PARAM_GO_VERSION_FILE}" ]; then
          GO_VERSION=$(cat "${PARAM_GO_VERSION_FILE}")
          echo "Go version specified in ${PARAM_GO_VERSION_FILE} is ${GO_VERSION}"
        elif [ -f "${FALLBACK_GO_VERSION_FILE}" ]; then
          GO_VERSION=$(cat "${FALLBACK_GO_VERSION_FILE}")
          echo "Go version specified in ${FALLBACK_GO_VERSION_FILE} is ${GO_VERSION}"
        else
          echo "Error: Go version was not specified as a parameter and neither ${PARAM_GO_VERSION_FILE} nor ${FALLBACK_GO_VERSION_FILE} exist"
          exit 1
        fi
        if (( PARAM_GO_PREV_VERSION > 0 )); then
          GO_MINOR_VERSION=$(echo "${GO_VERSION}" | sed 's/^go[0-9][0-9]*\.\([0-9][0-9]*\).*$/\1/')
          if (( GO_MINOR_VERSION == 0 )); then
            echo "Decrement operation not supported when minor version is 0"
            exit 1
          fi
          (( GO_MINOR_VERSION = GO_MINOR_VERSION - PARAM_GO_PREV_VERSION ))
          if (( GO_MINOR_VERSION < 0 )); then
            echo "Minor version cannot be less than 0; was: ${GO_MINOR_VERSION}"
            exit 1
          fi
          GO_MAJOR_VERSION=$(echo "${GO_VERSION}" | sed 's/^go\([0-9][0-9]*\).*$/\1/')
          GO_VERSION="go${GO_MAJOR_VERSION}.${GO_MINOR_VERSION}"
        fi
        echo "::set-output name=go-dist-version::$(echo $GO_VERSION)"
    - id: go-dist-exists
      shell: bash
      run: |
        GO_DIST_EXISTS="false"
        GO_DIST_DIR_PATH="${{ steps.gopath.outputs.gopath }}/go-dists/${{ steps.determine-go-dist-version.outputs.go-dist-version }}"
        if [ -d "${GO_DIST_DIR_PATH}" ]; then
          echo "Found directory at ${GO_DIST_DIR_PATH}: setting GO_DIST_EXISTS=true"
          GO_DIST_EXISTS="true"
        else
          echo "No directory found at ${GO_DIST_DIR_PATH}"
        fi
        echo "::set-output name=go-dist-exists::$GO_DIST_EXISTS"
