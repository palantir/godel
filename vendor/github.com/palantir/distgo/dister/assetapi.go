// Copyright 2016 Palantir Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dister

import (
	"encoding/json"

	"github.com/pkg/errors"
	"github.com/spf13/cobra"

	"github.com/palantir/distgo/assetapi"
	"github.com/palantir/distgo/distgo"
)

func AssetRootCmd(creator Creator, short string) *cobra.Command {
	name := creator.TypeName()
	rootCmd := &cobra.Command{
		Use:   name,
		Short: short,
	}

	creatorFn := creator.Creator()
	rootCmd.AddCommand(newNameCmd(name))
	rootCmd.AddCommand(newVerifyConfigCmd(creatorFn))
	rootCmd.AddCommand(assetapi.NewAssetTypeCmd(assetapi.Dister))
	rootCmd.AddCommand(newArtifactPathsCmd(creatorFn))
	rootCmd.AddCommand(newRunDistCmd(creatorFn))
	rootCmd.AddCommand(newGenerateDistArtifactsCmd(creatorFn))

	return rootCmd
}

const nameCmdName = "name"

func newNameCmd(name string) *cobra.Command {
	return &cobra.Command{
		Use:   nameCmdName,
		Short: "Print the name of the dister",
		RunE: func(cmd *cobra.Command, args []string) error {
			outputJSON, err := json.Marshal(name)
			if err != nil {
				return errors.Wrapf(err, "failed to marshal output as JSON")
			}
			cmd.Print(string(outputJSON))
			return nil
		},
	}
}

const commonCmdConfigYMLFlagName = "config-yml"

const (
	verifyConfigCmdName = "verify-config"
)

func newVerifyConfigCmd(creatorFn CreatorFunction) *cobra.Command {
	var configYMLFlagVal string
	verifyConfigCmd := &cobra.Command{
		Use:   verifyConfigCmdName,
		Short: "Verify that the provided input is valid configuration YML for this dister",
		RunE: func(cmd *cobra.Command, args []string) error {
			_, err := creatorFn([]byte(configYMLFlagVal))
			return err
		},
	}
	verifyConfigCmd.Flags().StringVar(&configYMLFlagVal, commonCmdConfigYMLFlagName, "", "configuration YML to verify")
	mustMarkFlagsRequired(verifyConfigCmd, commonCmdConfigYMLFlagName)
	return verifyConfigCmd
}

const (
	artifactPathsCmdName                 = "artifact-paths"
	artifactPathsCmdRenderedNameFlagName = "rendered-name"
)

func newArtifactPathsCmd(creatorFn CreatorFunction) *cobra.Command {
	var (
		configYMLFlagVal    string
		renderedNameFlagVal string
	)
	artifactsCmd := &cobra.Command{
		Use:   artifactPathsCmdName,
		Short: "Prints the paths (relative to the output directory) of the artifacts generated by the command",
		RunE: func(cmd *cobra.Command, args []string) error {
			dister, err := creatorFn([]byte(configYMLFlagVal))
			if err != nil {
				return err
			}
			outputPaths, err := dister.Artifacts(renderedNameFlagVal)
			if err != nil {
				return err
			}
			outputJSON, err := json.Marshal(outputPaths)
			if err != nil {
				return errors.Wrapf(err, "failed to marshal output as JSON")
			}
			cmd.Print(string(outputJSON))
			return nil
		},
	}
	artifactsCmd.Flags().StringVar(&configYMLFlagVal, commonCmdConfigYMLFlagName, "", "YML of dister configuration")
	artifactsCmd.Flags().StringVar(&renderedNameFlagVal, artifactPathsCmdRenderedNameFlagName, "", "rendered name of the product")
	mustMarkFlagsRequired(artifactsCmd, commonCmdConfigYMLFlagName, artifactPathsCmdRenderedNameFlagName)
	return artifactsCmd
}

const (
	runDistCmdName                          = "run-dist"
	runDistCmdDistIDFlagName                = "dist-id"
	runDistCmdProductTaskOutputInfoFlagName = "product-task-output-info"
)

func newRunDistCmd(creatorFn CreatorFunction) *cobra.Command {
	var (
		configYMLFlagVal             string
		distIDFlagVal                string
		productTaskOutputInfoFlagVal string
	)
	runDistCmd := &cobra.Command{
		Use:   runDistCmdName,
		Short: "Runs the dist action and prints the JSON representation of the return value",
		RunE: func(cmd *cobra.Command, args []string) error {
			dister, err := creatorFn([]byte(configYMLFlagVal))
			if err != nil {
				return err
			}
			var productTaskOutputInfo distgo.ProductTaskOutputInfo
			if err := json.Unmarshal([]byte(productTaskOutputInfoFlagVal), &productTaskOutputInfo); err != nil {
				return errors.Wrapf(err, "failed to unmarshal JSON %s", productTaskOutputInfoFlagVal)
			}
			jsonBytes, err := dister.RunDist(distgo.DistID(distIDFlagVal), productTaskOutputInfo)
			if err != nil {
				return err
			}
			cmd.Print(string(jsonBytes))
			return nil
		},
	}
	runDistCmd.Flags().StringVar(&configYMLFlagVal, commonCmdConfigYMLFlagName, "", "YML of dister configuration")
	runDistCmd.Flags().StringVar(&distIDFlagVal, runDistCmdDistIDFlagName, "", "DistID for the current dist task")
	runDistCmd.Flags().StringVar(&productTaskOutputInfoFlagVal, runDistCmdProductTaskOutputInfoFlagName, "", "JSON representation of distgo.ProductBuildInfo")
	mustMarkFlagsRequired(runDistCmd, commonCmdConfigYMLFlagName, runDistCmdDistIDFlagName, runDistCmdProductTaskOutputInfoFlagName)
	return runDistCmd
}

const (
	generateDistArtifactsCmdName                          = "generate-dist-artifacts"
	generateDistArtifactsCmdDistIDFlagName                = "dist-id"
	generateDistArtifactsCmdProductTaskOutputInfoFlagName = "product-task-output-info"
	generateDistArtifactsCmdRunDistResultFlagName         = "run-dist-result"
)

func newGenerateDistArtifactsCmd(creatorFn CreatorFunction) *cobra.Command {
	var (
		configYMLFlagVal             string
		distIDFlagVal                string
		productTaskOutputInfoFlagVal string
		distResultFlagVal            string
	)
	generateDistArtifactsCmd := &cobra.Command{
		Use:   generateDistArtifactsCmdName,
		Short: "Generates the artifacts for the dist task",
		RunE: func(cmd *cobra.Command, args []string) error {
			dister, err := creatorFn([]byte(configYMLFlagVal))
			if err != nil {
				return err
			}
			var productTaskOutputInfo distgo.ProductTaskOutputInfo
			if err := json.Unmarshal([]byte(productTaskOutputInfoFlagVal), &productTaskOutputInfo); err != nil {
				return errors.Wrapf(err, "failed to unmarshal JSON %s", productTaskOutputInfoFlagVal)
			}
			if err := dister.GenerateDistArtifacts(distgo.DistID(distIDFlagVal), productTaskOutputInfo, []byte(distResultFlagVal)); err != nil {
				return err
			}
			return nil
		},
	}
	generateDistArtifactsCmd.Flags().StringVar(&configYMLFlagVal, commonCmdConfigYMLFlagName, "", "YML of dister configuration")
	generateDistArtifactsCmd.Flags().StringVar(&distIDFlagVal, generateDistArtifactsCmdDistIDFlagName, "", "the DistID for the current dist task")
	generateDistArtifactsCmd.Flags().StringVar(&productTaskOutputInfoFlagVal, generateDistArtifactsCmdProductTaskOutputInfoFlagName, "", "JSON representation of distgo.ProductBuildInfo")
	generateDistArtifactsCmd.Flags().StringVar(&distResultFlagVal, generateDistArtifactsCmdRunDistResultFlagName, "", "the JSON output generated by RunDistResult")
	mustMarkFlagsRequired(generateDistArtifactsCmd,
		commonCmdConfigYMLFlagName,
		generateDistArtifactsCmdDistIDFlagName,
		generateDistArtifactsCmdProductTaskOutputInfoFlagName,
		generateDistArtifactsCmdRunDistResultFlagName,
	)
	return generateDistArtifactsCmd
}

func mustMarkFlagsRequired(cmd *cobra.Command, flagNames ...string) {
	for _, currFlagName := range flagNames {
		if err := cmd.MarkFlagRequired(currFlagName); err != nil {
			panic(err)
		}
	}
}
