### Docker images ###
alpine-go-1.7: &alpine-go-1_7
  working_directory: /go/src/github.com/palantir/godel
  docker:
    - image: nmiyake/go:alpine-go-1.7.6-t108

alpine-go-1.8: &alpine-go-1_8
  working_directory: /go/src/github.com/palantir/godel
  docker:
    - image: nmiyake/go:alpine-go-1.8.3-t108

brew-go: &brew-go
  working_directory: /go/src/github.com/palantir/godel
  docker:
    - image: nmiyake/go:brew-go-t108

darwin-linux: &darwin-linux
  working_directory: /go/src/github.com/palantir/godel
  docker:
    - image: nmiyake/go:go-darwin-linux-1.8.3-t108

darwin-linux-no-cgo: &darwin-linux-no-cgo
  working_directory: /go/src/github.com/palantir/godel
  docker:
    - image: nmiyake/go:go-darwin-linux-no-cgo-1.8.3-t108
      environment:
        CGO_ENABLED: 0

darwin-linux-rpm-fpm: &darwin-linux-rpm-fpm
  working_directory: /go/src/github.com/palantir/godel
  docker:
    - image: nmiyake/go:go-darwin-linux-1.8.3-docker-17.03.0-ce-rpm-fpm-t108

### Shared cache steps ###
godel-gouser-cache-restore: &godel-gouser-cache-restore
  restore_cache:
    keys:
      - godel-gouser-cache-{{ checksum "godelw" }}-v1
godel-gouser-cache-save: &godel-gouser-cache-save
  save_cache:
    key: godel-gouser-cache-{{ checksum "godelw" }}-v1
    paths:
      - /home/gouser/.godel

godel-linuxbrew-cache-restore: &godel-linuxbrew-cache-restore
  restore_cache:
    keys:
      - godel-linuxbrew-cache-{{ checksum "godelw" }}-v1
godel-linuxbrew-cache-save: &godel-linuxbrew-cache-save
  save_cache:
    key: godel-linuxbrew-cache-{{ checksum "godelw" }}-v1
    paths:
      - /home/linuxbrew/.godel

godel-root-cache-restore: &godel-root-cache-restore
  restore_cache:
    keys:
      - godel-root-cache-{{ checksum "godelw" }}-v1
godel-root-cache-save: &godel-root-cache-save
  save_cache:
    key: godel-root-cache-{{ checksum "godelw" }}-v1
    paths:
      - ~/.godel

### Shared test steps ###
define-tests-dir: &define-tests-dir
  run: echo 'export TESTS_DIR=/tmp/test-results/${CIRCLE_PROJECT_REPONAME}-${TESTS_NAME}-tests' >> $BASH_ENV

mkdir-tests-dir: &mkdir-tests-dir
  run: mkdir -p "${TESTS_DIR}"

store-test-results: &store-test-results
  type: test-results-store
  path: /tmp/test-results

### Other shared steps ###
go-install-packages: &go-install-packages
  run: go install $(./godelw packages)

godel-version: &godel-version
  run: ./godelw version

store-artifacts: &store-artifacts
  type: artifacts-store
  path: /tmp/test-results
  destination: test-results

### Jobs ###
version: 2
jobs:
  ### Base tests ###
  distgo:
    <<: *darwin-linux-rpm-fpm
    steps:
      - setup_remote_docker
      - checkout
      - *godel-gouser-cache-restore
      - *godel-version
      - *godel-gouser-cache-save
      - run: echo 'export TESTS_NAME=distgo' >> $BASH_ENV
      - *define-tests-dir
      - *mkdir-tests-dir
      - run: ./godelw build distgo
      - run: ./godelw test --tags=distgo --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"
      - *store-test-results
      - *store-artifacts

  godel:
    <<: *darwin-linux-no-cgo
    steps:
      - checkout
      - *godel-root-cache-restore
      - *godel-version
      - *godel-root-cache-save
      - *go-install-packages
      - run: echo 'export TESTS_NAME=unit' >> $BASH_ENV
      - *define-tests-dir
      - *mkdir-tests-dir
      - run: go install ./vendor/github.com/palantir/amalgomate
      - run: ./godelw verify --apply=false --tags=none --junit-output="${TESTS_DIR}/${CIRCLE_PROJECT_REPONAME}-${TESTS_NAME}-tests.xml"
      - *store-test-results
      - *store-artifacts

  gonform:
      <<: *darwin-linux-no-cgo
      steps:
        - checkout
        - *godel-root-cache-restore
        - *godel-version
        - *godel-root-cache-save
        - *go-install-packages
        - run: echo 'export TESTS_NAME=gonform' >> $BASH_ENV
        - *define-tests-dir
        - *mkdir-tests-dir
        - run: ./godelw test --tags=${TESTS_NAME} --junit-output="${TESTS_DIR}/${CIRCLE_PROJECT_REPONAME}-${TESTS_NAME}-tests.xml"
        - *store-test-results
        - *store-artifacts

  gunit:
    <<: *darwin-linux
    steps:
      - checkout
      - *godel-root-cache-restore
      - *godel-version
      - *godel-root-cache-save
      - *go-install-packages
      - run: echo 'export TESTS_NAME=gunit' >> $BASH_ENV
      - *define-tests-dir
      - *mkdir-tests-dir
      - run: git status
      - run: ./godelw dist gunit
      - run: ./godelw test --tags=${TESTS_NAME} --junit-output="${TESTS_DIR}/${CIRCLE_PROJECT_REPONAME}-${TESTS_NAME}-tests.xml"
      - *store-test-results
      - *store-artifacts

  okgo:
    <<: *darwin-linux-no-cgo
    steps:
      - checkout
      - *godel-root-cache-restore
      - *godel-version
      - *godel-root-cache-save
      - *go-install-packages
      - run: echo 'export TESTS_NAME=okgo' >> $BASH_ENV
      - *define-tests-dir
      - *mkdir-tests-dir
      - run: ./godelw test --tags=${TESTS_NAME} --junit-output="${TESTS_DIR}/${CIRCLE_PROJECT_REPONAME}-${TESTS_NAME}-tests.xml"
      - *store-test-results
      - *store-artifacts

  ### Integration tests ###
  integration-alpine-go-1.7:
    <<: *alpine-go-1_7
    steps:
      - checkout
      - *godel-root-cache-restore
      - *godel-version
      - *godel-root-cache-save
      - *go-install-packages
      - run: echo 'export TESTS_NAME=integration-alpine-go1.7' >> $BASH_ENV
      - *define-tests-dir
      - *mkdir-tests-dir
      - run: ./godelw test --tags=integration --junit-output="${TESTS_DIR}/${CIRCLE_PROJECT_REPONAME}-${TESTS_NAME}-tests.xml"
      - *store-test-results
      - *store-artifacts

  integration-alpine-go-1.8:
    <<: *alpine-go-1_8
    steps:
      - checkout
      - *godel-root-cache-restore
      - *godel-version
      - *godel-root-cache-save
      - *go-install-packages
      - run: echo 'export TESTS_NAME=integration-alpine-go1.8' >> $BASH_ENV
      - *define-tests-dir
      - *mkdir-tests-dir
      - run: ./godelw test --tags=integration --junit-output="${TESTS_DIR}/${CIRCLE_PROJECT_REPONAME}-${TESTS_NAME}-tests.xml"
      - *store-test-results
      - *store-artifacts

  integration-brew:
    <<: *brew-go
    steps:
      - checkout
      - *godel-linuxbrew-cache-restore
      - *godel-version
      - *godel-linuxbrew-cache-save
      - *go-install-packages
      - run: echo 'export TESTS_NAME=integration-brew' >> $BASH_ENV
      - *define-tests-dir
      - *mkdir-tests-dir
      - run: ./godelw test --tags=integration --junit-output="${TESTS_DIR}/${CIRCLE_PROJECT_REPONAME}-${TESTS_NAME}-tests.xml"
      - *store-test-results
      - *store-artifacts

  integration-std:
    <<: *darwin-linux-no-cgo
    steps:
      - checkout
      - *godel-root-cache-restore
      - *godel-version
      - *godel-root-cache-save
      - *go-install-packages
      - run: echo 'export TESTS_NAME=integration-go1.8' >> $BASH_ENV
      - *define-tests-dir
      - *mkdir-tests-dir
      - run: ./godelw test --tags=integration --junit-output="${TESTS_DIR}/${CIRCLE_PROJECT_REPONAME}-${TESTS_NAME}-tests.xml"
      - *store-test-results
      - *store-artifacts

  ### Docs ###
  wiki:
    <<: *darwin-linux-no-cgo
    steps:
      - checkout
      - *godel-root-cache-restore
      - *godel-version
      - *godel-root-cache-save
      - run: ./godelw github-wiki --docs-dir docs --repository=git@github.com:palantir/godel.wiki.git

  ### Dist/Publish ###
  dist:
    <<: *darwin-linux-no-cgo
    steps:
      - checkout
      - *godel-root-cache-restore
      - *godel-version
      - *godel-root-cache-save
      - run: ./godelw dist
      - save_cache:
          key: dist-{{ .Environment.CIRCLE_SHA1 }}-v1
          paths:
            - dist
  publish:
    <<: *darwin-linux-no-cgo
    steps:
      - checkout
      - *godel-root-cache-restore
      - *godel-version
      - *godel-root-cache-save
      - restore_cache:
          keys:
            - dist-{{ .Environment.CIRCLE_SHA1 }}-v1
      - run: ./godelw publish github --url https://api.github.com --user nmiyake --password $GITHUB_TOKEN --owner nmiyake --repository echgo

### Workflows ###
workflows:
  version: 2
  build-publish:
    jobs:
      - dist
      - distgo
      - godel
      - gonform
      - gunit
      - integration-alpine-go-1.7
      - integration-alpine-go-1.8
      - integration-brew
      - integration-std
      - okgo
      - wiki:
          requires:
            - dist
            - distgo
            - godel
            - gonform
            - gunit
            - integration-alpine-go-1.7
            - integration-alpine-go-1.8
            - integration-brew
            - integration-std
            - okgo
          filters:
            branches:
              only: /^master$/
      - publish:
          requires:
            - dist
            - distgo
            - godel
            - gonform
            - gunit
            - integration-alpine-go-1.7
            - integration-alpine-go-1.8
            - integration-brew
            - integration-std
            - okgo
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)+(-rc[0-9]+)?(-alpha[0-9]+)?$/
            branches:
              ignore: /.*/
