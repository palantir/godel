version: 2
executorType: machine
stages:
  build:
    parallel: 7
    workDir: ~/go/src/github.com/palantir/godel
    machine:
      reusable: true
    environment:
      PROJECT: godel
      GODIST: "go1.8.3.linux-amd64.tar.gz"
      IMPORT_PATH: "github.com/palantir/godel"
      GO_PROJECT_SRC_PATH: "/home/circleci/go/src/github.com/palantir/godel"
      GOPATH: "/home/circleci/go"
      BREW_GO_IMAGE: "nmiyake/go:brew-go-t41"
      ALPINE_1_8_IMAGE: "nmiyake/go:alpine-go-1.8.3-t41"
      ALPINE_1_7_IMAGE: "nmiyake/go:alpine-go-1.7.6-t41"
      GO_1_8_RPM_FPM_IMAGE: "nmiyake/go:go-1.8.3-rpm-fpm-t41"
    steps:
      - type: shell
        name: "Write GODIST to file"
        command: echo "$GODIST" > ~/GODIST.txt
      - type: shell
        name: "Clear download directory"
        command: sudo rm -rf ~/download
      - type: cache-restore
        key: GODIST-cache-{{ checksum "~/GODIST.txt" }}-v1
      - type: shell
        name: "Get Go with linux-amd64 and darwin-amd64 packages installed without CGO"
        command: |
          set -eu
          if [ ! -e "/home/circleci/download/$GODIST-custom.tgz" ]; then
            mkdir -p "/home/circleci/download"
            wget -O "/home/circleci/download/$GODIST" "https://storage.googleapis.com/golang/$GODIST"
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf "/home/circleci/download/$GODIST"
            sudo env CGO_ENABLED=0 GOOS=linux GOARCH=amd64 /usr/local/go/bin/go install std
            sudo env CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 /usr/local/go/bin/go install std
            tar -C /usr/local -czf "/home/circleci/download/$GODIST-custom.tgz" go
          fi
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "/home/circleci/download/$GODIST-custom.tgz"
      - type: cache-save
        key: GODIST-cache-{{ checksum "~/GODIST.txt" }}-v1
        paths:
          - ~/download
      - type: checkout
      - type: shell
        name: "Clear .godel"
        command: sudo rm -rf ~/.godel
      - type: cache-restore
        key: godel-cache-{{ checksum "godelw" }}-v1
      - type: shell
        name: "godel version"
        command: ./godelw version
      - type: shell
        name: "Set ownership on home directory"
        command: sudo chown -R circleci /home/circleci
      - type: cache-save
        key: godel-cache-{{ checksum "godelw" }}-v1
        paths:
          - ~/.godel
      - type: shell
        name: "Clear test results"
        command: rm -rf /tmp/test-results
      - type: shell
        name: "Force clean git"
        command: git clean -xfdf
      - type: shell
        name: "Pull brew-go Docker image"
        command: docker pull "$BREW_GO_IMAGE"
      - type: shell
        name: "Pull alpine-go-1.8 Docker image"
        command: docker pull "$ALPINE_1_8_IMAGE"
      - type: shell
        name: "Pull alpine-go-1.7 Docker image"
        command: docker pull "$ALPINE_1_7_IMAGE"
      - type: shell
        name: "Pull go-1.8-rpm-fpm Docker image"
        command: docker pull "$GO_1_8_RPM_FPM_IMAGE"
      - type: shell
        name: "Build distribution"
        command: ./godelw dist godel
      - type: shell
        name: "Node 0: run unit tests (native machine, Go 1.8)"
        command: |
          set -eu
          if [ "$CIRCLE_NODE_INDEX" == "0" ]; then
            CGO_ENABLED=0 go install $(./godelw packages)
            TESTS_NAME=unit
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            CGO_ENABLED=0 go install ./vendor/github.com/palantir/amalgomate
            PATH=$PATH:$GOPATH/bin
            ./godelw verify --apply=false --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"
          else
            echo "Skipping: current node is $CIRCLE_NODE_INDEX"
          fi
      - type: shell
        name: "Node 1: run integration tests (native machine, Go 1.8)"
        command: |
          set -eu
          if [ "$CIRCLE_NODE_INDEX" == "1" ]; then
            TESTS_NAME=integration-go1.8
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            ./godelw test --tags=integration --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"
          else
            echo "Skipping: current node is $CIRCLE_NODE_INDEX"
          fi
      - type: shell
        name: "Node 2: run integration tests (linux-brew Docker image, Go 1.8)"
        command: |
          set -eu
          if [ "$CIRCLE_NODE_INDEX" == "2" ]; then
            TESTS_NAME=integration-brew
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            docker run \
              -v "$GO_PROJECT_SRC_PATH":/go/src/$IMPORT_PATH \
              -v "$TESTS_DIR":"$TESTS_DIR" \
              -v ~/.godel:/root/.godel \
              -u root:root \
              -e PROJECT \
              -e IMPORT_PATH \
              -e "TESTS_NAME=$TESTS_NAME" \
              -e "TESTS_DIR=$TESTS_DIR" \
              "$BREW_GO_IMAGE" \
              /bin/sh -c 'cd /go/src/$IMPORT_PATH; ./godelw test --tags=integration --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"'
          else
            echo "Skipping: current node is $CIRCLE_NODE_INDEX"
          fi
      - type: shell
        name: "Node 3: run integration tests (alpine-go Docker image, Go 1.8)"
        command: |
          set -eu
          if [ "$CIRCLE_NODE_INDEX" == "3" ]; then
            TESTS_NAME=integration-alpine-go1.8
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            docker run \
              -v "$GO_PROJECT_SRC_PATH":/go/src/$IMPORT_PATH \
              -v "$TESTS_DIR":"$TESTS_DIR" \
              -v ~/.godel:/root/.godel \
              -u root:root \
              -e PROJECT \
              -e IMPORT_PATH \
              -e "TESTS_NAME=$TESTS_NAME" \
              -e "TESTS_DIR=$TESTS_DIR" \
              "$ALPINE_1_8_IMAGE" \
              /bin/sh -c 'cd /go/src/$IMPORT_PATH; ./godelw test --tags=integration --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"'
          else
            echo "Skipping: current node is $CIRCLE_NODE_INDEX"
          fi
      - type: shell
        name: "Node 4: run integration tests (alpine-go Docker image, Go 1.7)"
        command: |
          set -eu
          if [ "$CIRCLE_NODE_INDEX" == "4" ]; then
            TESTS_NAME=integration-alpine-go1.7
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            docker run \
              -v "$GO_PROJECT_SRC_PATH":/go/src/$IMPORT_PATH \
              -v "$TESTS_DIR":"$TESTS_DIR" \
              -v ~/.godel:/root/.godel \
              -u root:root \
              -e PROJECT \
              -e IMPORT_PATH \
              -e "TESTS_NAME=$TESTS_NAME" \
              -e "TESTS_DIR=$TESTS_DIR" \
              "$ALPINE_1_7_IMAGE" \
              /bin/sh -c 'cd /go/src/$IMPORT_PATH; ./godelw test --tags=integration --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"'
          else
            echo "Skipping: current node is $CIRCLE_NODE_INDEX"
          fi
      - type: shell
        name: "Node 5: run tests for distgo and gonform"
        command: |
          set -eu
          if [ "$CIRCLE_NODE_INDEX" == "5" ]; then
            ./godelw dist distgo gonform
            TESTS_NAME=distgo
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            docker run \
              -v "$GO_PROJECT_SRC_PATH":/go/src/$IMPORT_PATH \
              -v "$TESTS_DIR":"$TESTS_DIR" \
              -v ~/.godel:/home/gouser/.godel \
              -e PROJECT \
              -e IMPORT_PATH \
              -e "TESTS_NAME=$TESTS_NAME" \
              -e "TESTS_DIR=$TESTS_DIR" \
              -e "USER_ID=$(id -u)" \
              "$GO_1_8_RPM_FPM_IMAGE" \
              /run-as-gouser.sh 'cd /go/src/$IMPORT_PATH; ./godelw test --tags=distgo --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"'

            TESTS_NAME=gonform
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            docker run \
              -v "$GO_PROJECT_SRC_PATH":/go/src/$IMPORT_PATH \
              -v "$TESTS_DIR":"$TESTS_DIR" \
              -v ~/.godel:/home/gouser/.godel \
              -e PROJECT \
              -e IMPORT_PATH \
              -e "TESTS_NAME=$TESTS_NAME" \
              -e "TESTS_DIR=$TESTS_DIR" \
              -e "USER_ID=$(id -u)" \
              "$GO_1_8_RPM_FPM_IMAGE" \
              /run-as-gouser.sh 'cd /go/src/$IMPORT_PATH; ./godelw test --tags=gonform --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"'
          else
            echo "Skipping: current node is $CIRCLE_NODE_INDEX"
          fi
      - type: shell
        name: "Node 6: run tests for gunit and okgo"
        command: |
          set -eu
          if [ "$CIRCLE_NODE_INDEX" == "6" ]; then
            ./godelw dist gunit okgo
            TESTS_NAME=gunit
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            docker run \
              -v "$GO_PROJECT_SRC_PATH":/go/src/$IMPORT_PATH \
              -v "$TESTS_DIR":"$TESTS_DIR" \
              -v ~/.godel:/home/gouser/.godel \
              -e PROJECT \
              -e IMPORT_PATH \
              -e "TESTS_NAME=$TESTS_NAME" \
              -e "TESTS_DIR=$TESTS_DIR" \
              -e "USER_ID=$(id -u)" \
              "$GO_1_8_RPM_FPM_IMAGE" \
              /run-as-gouser.sh 'cd /go/src/$IMPORT_PATH; ./godelw test --tags=gunit --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"'

            TESTS_NAME=distgo-docker
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            ./godelw test --tags=docker-distgo --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"

            TESTS_NAME=okgo
            TESTS_DIR=/tmp/test-results/$PROJECT-$TESTS_NAME-tests
            mkdir -p "$TESTS_DIR"
            docker run \
              -v "$GO_PROJECT_SRC_PATH":/go/src/$IMPORT_PATH \
              -v "$TESTS_DIR":"$TESTS_DIR" \
              -v ~/.godel:/home/gouser/.godel \
              -e PROJECT \
              -e IMPORT_PATH \
              -e "TESTS_NAME=$TESTS_NAME" \
              -e "TESTS_DIR=$TESTS_DIR" \
              -e "USER_ID=$(id -u)" \
              "$GO_1_8_RPM_FPM_IMAGE" \
              /run-as-gouser.sh 'cd /go/src/$IMPORT_PATH; ./godelw test --tags=okgo --junit-output="$TESTS_DIR/$PROJECT-$TESTS_NAME-tests.xml"'
          else
            echo "Skipping: current node is $CIRCLE_NODE_INDEX"
          fi
      - type: test-results-store
        path: /tmp/test-results
      - type: artifacts-store
        path: /tmp/test-results
        destination: test-results
      - type: deploy
        name: "Update GitHub Wiki on master branch"
        command: |
          set -eu
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            cd "$GO_PROJECT_SRC_PATH"
            ./godelw github-wiki --docs-dir docs --repository=git@github.com:palantir/godel.wiki.git
          fi
      - type: deploy
        name: "Publish on release tags"
        command: |
          set -eu
          TAG=$(git describe --tags)
          if [[ $TAG =~ ^[0-9]+(\.[0-9]+)+(-rc[0-9]+)?(-alpha[0-9]+)?$ ]]; then
            cd "$GO_PROJECT_SRC_PATH"
            ./godelw publish bintray --url https://api.bintray.com --subject palantir --repository releases --user "$BINTRAY_USER" --password "$BINTRAY_PASSWORD" --publish --downloads-list godel
          fi
