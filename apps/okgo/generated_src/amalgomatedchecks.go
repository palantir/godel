// generated by amalgomate; DO NOT EDIT
package amalgomatedchecks

import (
	"fmt"
	"sort"

	golint "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/golang/lint/golint"
	ineffassign "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/gordonklaus/ineffassign"
	errcheck "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/kisielk/errcheck"
	unconvert "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/mdempsky/unconvert"
	govet "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/nmiyake/govet"
	varcheck "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/opennota/check/cmd/varcheck"
	compiles "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/palantir/checks/compiles"
	extimport "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/palantir/checks/extimport"
	importalias "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/palantir/checks/importalias"
	nobadfuncs "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/palantir/checks/nobadfuncs"
	novendor "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/palantir/checks/novendor"
	outparamcheck "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/palantir/checks/outparamcheck"
	deadcode "github.com/palantir/godel/apps/okgo/generated_src/internal/github.com/remyoudompheng/go-misc/deadcode"
)

var programs = map[string]func(){"compiles": func() {
	compiles.AmalgomatedMain()
}, "deadcode": func() {
	deadcode.AmalgomatedMain()
}, "errcheck": func() {
	errcheck.AmalgomatedMain()
}, "extimport": func() {
	extimport.AmalgomatedMain()
}, "golint": func() {
	golint.AmalgomatedMain()
}, "govet": func() {
	govet.AmalgomatedMain()
}, "importalias": func() {
	importalias.AmalgomatedMain()
}, "ineffassign": func() {
	ineffassign.AmalgomatedMain()
}, "nobadfuncs": func() {
	nobadfuncs.AmalgomatedMain()
}, "novendor": func() {
	novendor.AmalgomatedMain()
}, "outparamcheck": func() {
	outparamcheck.AmalgomatedMain()
}, "unconvert": func() {
	unconvert.AmalgomatedMain()
}, "varcheck": func() {
	varcheck.AmalgomatedMain()
},
}

func Instance() Amalgomated {
	return &amalgomated{}
}

type Amalgomated interface {
	Run(cmd string)
	Cmds() []string
}

type amalgomated struct{}

func (a *amalgomated) Run(cmd string) {
	if _, ok := programs[cmd]; !ok {
		panic(fmt.Sprintf("Unknown command: \"%v\". Valid values: %v", cmd, a.Cmds()))
	}
	programs[cmd]()
}

func (a *amalgomated) Cmds() []string {
	var cmds []string
	for key := range programs {
		cmds = append(cmds, key)
	}
	sort.Strings(cmds)
	return cmds
}
