// Copyright 2016 Palantir Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package params

import (
	"github.com/palantir/pkg/matcher"
)

type Project struct {
	// Products maps product names to configurations.
	Products map[string]Product
	// BuildOutputDir specifies the default build output directory for products executables built by the "build"
	// command. The executables generated by "build" will be written to this directory unless the location is
	// overridden by the product-specific configuration.
	BuildOutputDir string
	// DistOutputDir specifies the default distribution output directory for product distributions created by the
	// "dist" command. The distribution directory and artifact generated by "dist" will be written to this directory
	// unless the location is overridden by the product-specific configuration.
	DistOutputDir string
	// DistScriptInclude is script content that is prepended to any non-empty ProductDistCfg.Script. It can be used
	// to define common functionality used in the distribution script for multiple different products.
	DistScriptInclude string
	// GroupID is the identifier used as the group ID for the POM.
	GroupID string
	// Exclude matches the paths to exclude when determining the projects to build.
	Exclude matcher.Matcher
}

func (d Project) FilteredProducts() map[string]Product {
	output := make(map[string]Product)
	for currProduct, currCfg := range d.Products {
		currMainPkg := currCfg.Build.MainPkg
		if !(d.Exclude != nil && d.Exclude.Match(currMainPkg)) {
			output[currProduct] = currCfg
		}
	}
	return output
}

type Product struct {
	// Build specifies the build configuration for the product.
	Build Build
	// Run specifies the run configuration for the product.
	Run Run
	// Dist specifies the dist configurations for the product.
	Dist []Dist
	// DockerImages specifies the docker build configurations for the product.
	DockerImages []DockerImage
	// Publish specifies the publish configuration that is applied to distributions that do not specify their own
	// publish configurations.
	Publish Publish
}
